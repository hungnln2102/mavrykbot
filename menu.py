from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import telegram
import logging

ADMIN_USER_IDS = [510811276]
logger = logging.getLogger(__name__)

# Menu ngo√†i c√πng: Ch·ªçn ph√¢n h·ªá
async def show_outer_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Hi·ªÉn th·ªã menu ch√≠nh. T·ª± ƒë·ªông x·ª≠ l√Ω vi·ªác edit tin nh·∫Øn vƒÉn b·∫£n
    ho·∫∑c thay th·∫ø tin nh·∫Øn media.
    """
    keyboard = [
        [
            InlineKeyboardButton("üë§ ƒê∆°n Ch∆∞a Thanh To√°n", callback_data='unpaid_orders'),
            InlineKeyboardButton("üè¨ Shop", callback_data='menu_shop')
        ],
        [
            InlineKeyboardButton("üí∞ T·∫°o QR Thanh To√°n", callback_data='create_qr'),
            InlineKeyboardButton("üí∞ Thanh To√°n Ngu·ªìn", callback_data='payment_source')
        ],
        [
            InlineKeyboardButton("üí∏ Ho√†n Ti·ªÅn", callback_data='start_refund')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = "üîΩ *Ch·ªçn ph√¢n h·ªá l√†m vi·ªác:*"

    query = update.callback_query
    
    try:
        if query:
            # N·∫øu tin nh·∫Øn g·ªëc l√† tin nh·∫Øn vƒÉn b·∫£n, ta ch·ªâ c·∫ßn edit n√≥.
            if query.message.text:
                logger.info("üîπ show_outer_menu: Editing text message.")
                await query.edit_message_text(
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            # N·∫øu tin nh·∫Øn g·ªëc l√† media (h√¨nh ·∫£nh), ta ph·∫£i x√≥a v√† g·ª≠i m·ªõi.
            else:
                logger.info("üîπ show_outer_menu: Replacing media message with text menu.")
                await query.message.delete()
                await query.message.chat.send_message(
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        # N·∫øu ng∆∞·ªùi d√πng g√µ l·ªánh /start ho·∫∑c /menu
        elif update.message:
            logger.info("üîπ show_outer_menu: Sending new menu message.")
            await update.message.reply_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except telegram.error.BadRequest as e:
        # Gi·ªØ l·∫°i kh·ªëi except n√†y nh∆∞ m·ªôt l·ªõp b·∫£o v·ªá cu·ªëi c√πng cho c√°c l·ªói kh√¥ng l∆∞·ªùng tr∆∞·ªõc
        logger.error(f"‚ùå L·ªói kh√¥ng mong mu·ªën trong show_outer_menu: {e}")
        try:
            await update.effective_chat.send_message(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as final_e:
            logger.critical(f"üí£ Kh√¥ng th·ªÉ g·ª≠i menu cho ng∆∞·ªùi d√πng: {final_e}")


# Menu SHOP: g·ªìm 5 n√∫t chia th√†nh 3 h√†ng
async def show_main_selector(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    edit: bool = False,
    text: str | None = None,
) -> None:
    keyboard = [
        [
            InlineKeyboardButton("üìù Th√™m ƒê∆°n", callback_data="add"),
            InlineKeyboardButton("üîÑ Xem/Ch·ªânh ƒê∆°n", callback_data="update"),
        ],
        [
            InlineKeyboardButton("üì• Nh·∫≠p H√†ng", callback_data="nhap_hang"),
        ],
        [
            InlineKeyboardButton("‚è∞ ƒê∆°n ƒê·∫øn H·∫°n", callback_data="expired"),
            InlineKeyboardButton("‚ùå ƒê√≥ng", callback_data="close_menu"),
        ],
    ]
    markup = InlineKeyboardMarkup(keyboard)

    q = update.callback_query
    msg = q.message if q else update.effective_message
    body = text or "üëâ Ch·ªçn ch·ª©c nƒÉng:"

    try:
        if q:
            await q.answer()
            # N·∫øu b·∫£n g·ªëc l√† text -> edit; n·∫øu l√† media -> xo√° v√† g·ª≠i m·ªõi
            if getattr(msg, "text", None):
                await msg.edit_text(body, reply_markup=markup, parse_mode="Markdown")
            else:
                await msg.delete()
                await msg.chat.send_message(body, reply_markup=markup, parse_mode="Markdown")
        else:
            await msg.reply_text(body, reply_markup=markup, parse_mode="Markdown")
    except telegram.error.BadRequest as e:
        logger.warning(f"show_main_selector BadRequest: {e}")
        await update.effective_chat.send_message(body, reply_markup=markup, parse_mode="Markdown")
