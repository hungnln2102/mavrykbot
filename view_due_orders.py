# view_due_orders.py (ƒê√£ c·∫≠p nh·∫≠t ƒë·ªÉ d√πng sheet 'T·ª∑ gi√°')

import requests
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ContextTypes
from telegram.error import BadRequest
from utils import connect_to_sheet, escape_mdv2
from add_order import tinh_ngay_het_han
from datetime import datetime, timedelta
from io import BytesIO
from menu import show_outer_menu
from collections import OrderedDict
from column import SHEETS, ORDER_COLUMNS, TYGIA_IDX
import logging
import asyncio

logger = logging.getLogger(__name__)


def clean_price_to_amount(text):
    """Chuy·ªÉn ƒë·ªïi chu·ªói gi√° th√†nh s·ªë nguy√™n."""
    return int(str(text).replace(",", "").replace(".", "").replace("‚Ç´", "").replace("ƒë", "").replace(" ", ""))

async def view_expired_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """B·∫Øt ƒë·∫ßu quy tr√¨nh, t·∫£i v√† cache to√†n b·ªô d·ªØ li·ªáu c·∫ßn thi·∫øt."""
    query = update.callback_query
    await query.answer("ƒêang t·∫£i d·ªØ li·ªáu, vui l√≤ng ch·ªù...")

    try:
        spreadsheet = connect_to_sheet()
        order_sheet = spreadsheet.worksheet(SHEETS["ORDER"])
        price_sheet = spreadsheet.worksheet(SHEETS["EXCHANGE"])
        
        all_orders_data = order_sheet.get_all_values()
        price_list_data = price_sheet.get_all_values()
        
        if len(all_orders_data) <= 1:
            await query.edit_message_text(escape_mdv2("‚úÖ Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆°n h√†ng n√†o."), parse_mode="MarkdownV2")
            return

    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Google Sheet: {e}")
        await query.edit_message_text(escape_mdv2("‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Google Sheet."), parse_mode="MarkdownV2")
        return

    rows = all_orders_data[1:]
    expired_orders = OrderedDict()
    
    for i, row in enumerate(rows, start=2):
        if not any(cell.strip() for cell in row): continue
        try:
            con_lai_val = float(row[ORDER_COLUMNS["CON_LAI"]].strip())
            ma_don = row[ORDER_COLUMNS["ID_DON_HANG"]].strip()
            if ma_don and con_lai_val <= 4:
                expired_orders[ma_don] = {"data": row, "row_index": i}
        except (ValueError, IndexError):
            continue

    if not expired_orders:
        await query.edit_message_text(escape_mdv2("‚úÖ Hi·ªán kh√¥ng c√≥ ƒë∆°n h√†ng n√†o s·∫Øp h·∫øt h·∫°n."))
        return

    context.user_data["expired_orders"] = expired_orders
    context.user_data["price_list_data"] = price_list_data
    context.user_data["expired_index"] = 0
    
    await show_expired_order(update, context, direction="stay")

def get_gia_ban(ma_don, ma_san_pham, banggia_data, gia_ban_donhang=None):
    """L·∫•y gi√° b√°n ch√≠nh x√°c t·ª´ d·ªØ li·ªáu cache."""
    ma_sp = str(ma_san_pham).strip().replace("‚Äì", "--").replace("‚Äî", "--")
    is_ctv = str(ma_don).upper().startswith("MAVC")

    for row in banggia_data[1:]:
        if len(row) <= max(TYGIA_IDX["GIA_CTV"], TYGIA_IDX["GIA_KHACH"]): continue
        sp_goc = str(row[TYGIA_IDX["SAN_PHAM"]]).strip().replace("‚Äì", "--").replace("‚Äî", "--")
        if sp_goc == ma_sp:
            try:
                gia_str = row[TYGIA_IDX["GIA_CTV"]] if is_ctv else row[TYGIA_IDX["GIA_KHACH"]]
                gia = clean_price_to_amount(gia_str)
                if gia > 0: return gia
            except Exception as e:
                logger.warning(f"[L·ªói parse gi√° trong b·∫£ng gi√°]: {e}")
            break
    
    if isinstance(gia_ban_donhang, list): gia_ban_donhang = gia_ban_donhang[0] if gia_ban_donhang else ""
    return clean_price_to_amount(gia_ban_donhang) if gia_ban_donhang else 0

def build_order_caption(row: list, price_list_data: list, index: int, total: int):
    def get_val(col_name):
        try: return row[ORDER_COLUMNS[col_name]].strip()
        except (IndexError, KeyError): return ""
    
    ma_don_raw, product_raw = get_val("ID_DON_HANG"), get_val("SAN_PHAM")
    con_lai_raw = get_val("CON_LAI")
    
    days_left = int(float(con_lai_raw)) if con_lai_raw and con_lai_raw.replace('.', '', 1).isdigit() else 0
    gia_int = get_gia_ban(ma_don_raw, product_raw, price_list_data, row[ORDER_COLUMNS["GIA_BAN"]])
    gia_value_raw = "{:,} ƒë".format(gia_int) if gia_int > 0 else "Ch∆∞a x√°c ƒë·ªãnh"

    product_md = escape_mdv2(product_raw)
    ma_don_md = escape_mdv2(ma_don_raw)
    info_md = escape_mdv2(get_val("THONG_TIN_DON"))
    ten_khach_md = escape_mdv2(get_val("TEN_KHACH"))
    link_khach_md = escape_mdv2(get_val("LINK_KHACH"))
    slot_md = escape_mdv2(get_val("SLOT"))
    ngay_dang_ky_md = escape_mdv2(get_val("NGAY_DANG_KY"))
    so_ngay_md = escape_mdv2(get_val("SO_NGAY"))
    ngay_het_han_md = escape_mdv2(get_val("HET_HAN"))
    gia_md = escape_mdv2(gia_value_raw)

    try:
        amount = clean_price_to_amount(gia_value_raw)
        qr_url = f"https://img.vietqr.io/image/VPB-mavpre-compact2.png?amount={amount}&addInfo={ma_don_raw}&accountName=NGO%20LE%20NGOC%20HUNG"
        response = requests.get(qr_url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
        response.raise_for_status()
        qr_image = BytesIO(response.content)
    except requests.exceptions.RequestException as e:
        logger.error(f"L·ªói t·∫°o QR: {e}")
        qr_image = None
    if days_left <= 0: status_line = f"‚õîÔ∏è ƒê√£ h·∫øt h·∫°n {abs(days_left)} ng√†y tr∆∞·ªõc"
    else: status_line = f"‚è≥ C√≤n l·∫°i {days_left} ng√†y"
    
    header = (
        f"üì¶ *ƒê∆°n h√†ng ƒë·∫øn h·∫°n* `({index + 1}/{total})`\n"
        f"*{escape_mdv2('S·∫£n ph·∫©m:')}* {product_md}\n"
        f"*{escape_mdv2('M√£ ƒë∆°n:')}* `{ma_don_md}`\n"
        f"{escape_mdv2(status_line)}"
    )
    body = (
        f"üì¶ *TH√îNG TIN S·∫¢N PH·∫®M*\n"
        f"üìù *M√¥ t·∫£:* {info_md}\n" +
        (f"üß© *Slot:* {slot_md}\n" if get_val("SLOT") else "") +
        (f"üìÖ Ng√†y ƒëƒÉng k√Ω: {ngay_dang_ky_md}\n" if get_val("NGAY_DANG_KY") else "") +
        f"‚è≥ *Th·ªùi h·∫°n:* {so_ngay_md} ng√†y\n"
        f"‚è≥ *Ng√†y h·∫øt h·∫°n:* {ngay_het_han_md}\n"
        f"üíµ *Gi√° b√°n:* {gia_md}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ üë§ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üë§ *TH√îNG TIN KH√ÅCH H√ÄNG*\n"
        f"üî∏ *T√™n:* {ten_khach_md}\n" +
        (f"üîó *Li√™n h·ªá:* {link_khach_md}\n" if get_val("LINK_KHACH") else "")
    )
    footer = (
        escape_mdv2("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n") +
        escape_mdv2("üí¨ ƒê·ªÉ duy tr√¨ d·ªãch v·ª•, qu√Ω kh√°ch vui l√≤ng thanh to√°n theo th√¥ng tin d∆∞·ªõi ƒë√¢y:\n\n") +
        escape_mdv2("üè¶ Ng√¢n h√†ng: VP Bank\n") +
        escape_mdv2("üí≥ STK: 9183400998\n") +
        escape_mdv2("üë§ T√™n: NGO LE NGOC HUNG\n") +
        escape_mdv2(f"üìù N·ªôi dung: Thanh to√°n {ma_don_raw}\n\n") +
        escape_mdv2("üìé Vui l√≤ng ghi ƒë√∫ng m√£ ƒë∆°n h√†ng trong n·ªôi dung chuy·ªÉn kho·∫£n ƒë·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω nhanh ch√≥ng.\n") +
        escape_mdv2("‚ú® Tr√¢n tr·ªçng c·∫£m ∆°n qu√Ω kh√°ch!\n") + "\u200b"
    )
    return f"{header}\n{escape_mdv2('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')}\n{body}\n{footer}", qr_image

async def extend_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("ƒêang gia h·∫°n...")
    ma_don = query.data.split("|")[1].strip()

    orders: OrderedDict = context.user_data.get("expired_orders", OrderedDict())
    order_info = orders.get(ma_don)
    
    if not order_info:
        await query.answer("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng trong cache.", show_alert=True)
        return

    row_data, row_idx = order_info["data"], order_info["row_index"]
    
    product = row_data[ORDER_COLUMNS["SAN_PHAM"]].strip()
    matched = re.search(r"--(\d+)m", product)
    if not matched:
        await query.answer("‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c th·ªùi h·∫°n t·ª´ s·∫£n ph·∫©m.", show_alert=True)
        return
    so_thang = int(matched.group(1)); so_ngay = 365 if so_thang == 12 else so_thang * 30
    ngay_cu_str = row_data[ORDER_COLUMNS["HET_HAN"]].strip()
    try:
        dt_cu = datetime.strptime(ngay_cu_str, "%d/%m/%Y")
    except ValueError:
        await query.answer(f"‚ö†Ô∏è ƒê·ªãnh d·∫°ng ng√†y h·∫øt h·∫°n '{ngay_cu_str}' kh√¥ng h·ª£p l·ªá.", show_alert=True)
        return
    dt_moi = dt_cu + timedelta(days=1)
    ngay_bat_dau_moi = dt_moi.strftime("%d/%m/%Y")
    ngay_het_han_moi = tinh_ngay_het_han(ngay_bat_dau_moi, str(so_ngay))
    price_list_data = context.user_data.get("price_list_data", [])
    gia_ban_moi = get_gia_ban(ma_don, product, price_list_data, row_data[ORDER_COLUMNS["GIA_BAN"]])

    try:
        sheet = connect_to_sheet().worksheet(SHEETS["ORDER"])
        range_1 = f'G{row_idx}:I{row_idx}'
        values_1 = [[ngay_bat_dau_moi, str(so_ngay), ngay_het_han_moi]]
        sheet.update(range_1, values_1, value_input_option='USER_ENTERED')
        sheet.update_cell(row_idx, ORDER_COLUMNS["GIA_BAN"] + 1, str(gia_ban_moi))
        
        await query.answer("‚úÖ Gia h·∫°n th√†nh c√¥ng!", show_alert=True)
    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t h√†ng lo·∫°t cho ƒë∆°n {ma_don}: {e}")
        await query.answer("‚ùå L·ªói khi c·∫≠p nh·∫≠t Google Sheet.", show_alert=True)
        return

    orders.pop(ma_don)
    context.user_data["expired_orders"] = orders
    await show_expired_order(update, context, "stay")

async def show_expired_order(update: Update, context: ContextTypes.DEFAULT_TYPE, direction: str):
    query = update.callback_query
    await query.answer()
    orders: OrderedDict = context.user_data.get("expired_orders", OrderedDict())
    index: int = context.user_data.get("expired_index", 0)
    
    if not orders:
        await query.edit_message_text(escape_mdv2("‚úÖ Kh√¥ng c√≤n ƒë∆°n h√†ng n√†o ƒë·ªÉ hi·ªÉn th·ªã."))
        await show_outer_menu(update, context, is_edit=False)
        return

    keys, total_orders = list(orders.keys()), len(orders)
    if direction == "next": index += 1
    elif direction == "prev": index -= 1
    index = max(0, min(index, total_orders - 1))
    context.user_data["expired_index"] = index

    ma_don, order_info = keys[index], orders[keys[index]]
    price_list_data = context.user_data.get("price_list_data", [])
    caption, qr_image = build_order_caption(order_info["data"], price_list_data, index, total_orders)

    nav_buttons = []
    if index > 0: nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data="prev_expired"))
    if index < total_orders - 1: nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è Next", callback_data="next_expired"))
    
    buttons = []
    if nav_buttons: buttons.append(nav_buttons)
    buttons.append([
        InlineKeyboardButton("üîÑ Gia h·∫°n", callback_data=f"extend_order|{ma_don}"),
        InlineKeyboardButton("üóëÔ∏è X√≥a ƒë∆°n", callback_data=f"delete_order_from_expired|{ma_don}"),
        InlineKeyboardButton("üîö K·∫øt th√∫c", callback_data="back_to_menu_expired")
    ])
    reply_markup = InlineKeyboardMarkup(buttons)
    if qr_image:
        try:
            qr_image.seek(0)
            await query.message.edit_media(media=InputMediaPhoto(media=qr_image, caption=caption, parse_mode="MarkdownV2"), reply_markup=reply_markup)
        except BadRequest as e:
            if "message to edit not found" in str(e).lower() or "file must be non-empty" in str(e).lower():
                logger.warning(f"L·ªói edit_media ('{e}'), th·ª≠ g·ª≠i m·ªõi.")
                try: 
                    await query.message.delete()
                except BadRequest:
                    pass
                qr_image.seek(0)
                await query.message.chat.send_photo(photo=qr_image, caption=caption, parse_mode="MarkdownV2", reply_markup=reply_markup)
            else:
                logger.error(f"L·ªói Telegram kh√¥ng x√°c ƒë·ªãnh: {e}")
                await query.answer("‚ùå ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã ƒë∆°n h√†ng.", show_alert=True)
    else:
        try:
            await query.message.edit_text(text=caption, parse_mode="MarkdownV2", reply_markup=reply_markup)
            await query.answer("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o m√£ QR.", show_alert=False)
        except BadRequest as e:
             if "message is not modified" in str(e).lower():
                 pass
             else:
                 logger.error(f"L·ªói khi s·ª≠a text: {e}")

async def delete_order_from_expired(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("ƒêang x√≥a...")
    ma_don_to_delete = query.data.split("|")[1].strip()
    
    orders: OrderedDict = context.user_data.get("expired_orders", OrderedDict())
    order_info = orders.get(ma_don_to_delete)
    
    if not order_info:
        await query.answer("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng trong cache.", show_alert=True)
        return

    row_idx_to_delete = order_info.get("row_index")
    try:
        sheet = connect_to_sheet().worksheet(SHEETS["ORDER"])
        sheet.delete_rows(row_idx_to_delete)
        await query.answer("üóëÔ∏è X√≥a ƒë∆°n h√†ng th√†nh c√¥ng!", show_alert=True)
    except Exception as e:
        logger.error(f"L·ªói khi x√≥a ƒë∆°n {ma_don_to_delete}: {e}")
        await query.answer("‚ùå L·ªói khi x√≥a ƒë∆°n tr√™n Google Sheet.", show_alert=True)
        return
        
    updated_orders = OrderedDict()
    for key, value in orders.items():
        if key == ma_don_to_delete:
            continue
        current_row_index = value["row_index"]
        if current_row_index > row_idx_to_delete:
            value["row_index"] = current_row_index - 1
        updated_orders[key] = value

    context.user_data["expired_orders"] = updated_orders
    
    await show_expired_order(update, context, "stay")

async def back_to_menu_from_expired(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.pop("expired_orders", None)
    context.user_data.pop("price_list_data", None)
    context.user_data.pop("expired_index", None)
    await show_outer_menu(update, context)