# view_due_orders.py (C·∫≠p nh·∫≠t: Th√™m logic x√≥a h√†ng khi < 0 ng√†y)

import requests
import re
from telegram import Update, InputMediaPhoto
from telegram.ext import ContextTypes
from telegram.error import BadRequest
from telegram.constants import ParseMode
from utils import connect_to_sheet, escape_mdv2
from io import BytesIO
from column import SHEETS, ORDER_COLUMNS, TYGIA_IDX
import logging
import asyncio
import config 
from datetime import datetime, date

logger = logging.getLogger(__name__)

# --------------------------------------------------------------------
# C√ÅC H√ÄM H·ªñ TR·ª¢
# --------------------------------------------------------------------

def clean_price_to_amount(text):
    """Chuy·ªÉn ƒë·ªïi chu·ªói gi√° th√†nh s·ªë nguy√™n."""
    return int(str(text).replace(",", "").replace(".", "").replace("‚Ç´", "").replace("ƒë", "").replace(" ", ""))

def get_gia_ban(ma_don, ma_san_pham, banggia_data, gia_ban_donhang=None):
    """L·∫•y gi√° b√°n ch√≠nh x√°c t·ª´ d·ªØ li·ªáu cache."""
    ma_sp = str(ma_san_pham).strip().replace("‚Äì", "--").replace("‚Äî", "--")
    is_ctv = str(ma_don).upper().startswith("MAVC")

    for row in banggia_data[1:]:
        if len(row) <= max(TYGIA_IDX["GIA_CTV"], TYGIA_IDX["GIA_KHACH"]): continue
        sp_goc = str(row[TYGIA_IDX["SAN_PHAM"]]).strip().replace("‚Äì", "--").replace("‚Äî", "--")
        if sp_goc == ma_sp:
            try:
                gia_str = row[TYGIA_IDX["GIA_CTV"]] if is_ctv else row[TYGIA_IDX["GIA_KHACH"]]
                gia = clean_price_to_amount(gia_str)
                if gia > 0: return gia
            except Exception as e:
                logger.warning(f"[L·ªói parse gi√° trong b·∫£ng gi√°]: {e}")
            break
    
    if isinstance(gia_ban_donhang, list): gia_ban_donhang = gia_ban_donhang[0] if gia_ban_donhang else ""
    return clean_price_to_amount(gia_ban_donhang) if gia_ban_donhang else 0

def build_order_caption(row: list, price_list_data: list, index: int, total: int, forced_days_left: int = None):
    """X√¢y d·ª±ng n·ªôi dung tin nh·∫Øn cho ƒë∆°n h√†ng."""
    def get_val(col_name):
        try: return row[ORDER_COLUMNS[col_name]].strip()
        except (IndexError, KeyError): return ""
    
    ma_don_raw, product_raw = get_val("ID_DON_HANG"), get_val("SAN_PHAM")
    
    if forced_days_left is not None:
        days_left = forced_days_left
    else:
        con_lai_raw = get_val("CON_LAI")
        days_left = int(float(con_lai_raw)) if con_lai_raw and con_lai_raw.replace('.', '', 1).isdigit() else 0
    
    gia_int = get_gia_ban(ma_don_raw, product_raw, price_list_data, row[ORDER_COLUMNS["GIA_BAN"]])
    gia_value_raw = "{:,} ƒë".format(gia_int) if gia_int > 0 else "Ch∆∞a x√°c ƒë·ªãnh"

    product_md = escape_mdv2(product_raw)
    ma_don_md = escape_mdv2(ma_don_raw)
    info_md = escape_mdv2(get_val("THONG_TIN_DON"))
    ten_khach_md = escape_mdv2(get_val("TEN_KHACH"))
    link_khach_md = escape_mdv2(get_val("LINK_KHACH"))
    slot_md = escape_mdv2(get_val("SLOT"))
    ngay_dang_ky_md = escape_mdv2(get_val("NGAY_DANG_KY"))
    so_ngay_md = escape_mdv2(get_val("SO_NGAY"))
    ngay_het_han_md = escape_mdv2(get_val("HET_HAN"))
    gia_md = escape_mdv2(gia_value_raw)

    try:
        amount = clean_price_to_amount(gia_value_raw)
        qr_url = f"https://img.vietqr.io/image/VPB-mavpre-compact2.png?amount={amount}&addInfo={ma_don_raw}&accountName=NGO%20LE%20NGOC%20HUNG"
        response = requests.get(qr_url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
        response.raise_for_status()
        qr_image = BytesIO(response.content)
    except requests.exceptions.RequestException as e:
        logger.error(f"L·ªói t·∫°o QR: {e}")
        qr_image = None
        
    if days_left <= 0: status_line = f"‚õîÔ∏è ƒê√£ h·∫øt h·∫°n {abs(days_left)} ng√†y tr∆∞·ªõc"
    else: status_line = f"‚è≥ C√≤n l·∫°i {days_left} ng√†y"
    
    header = (
        f"üì¶ *ƒê∆°n h√†ng ƒë·∫øn h·∫°n* `({index + 1}/{total})`\n"
        f"*{escape_mdv2('S·∫£n ph·∫©m:')}* {product_md}\n"
        f"*{escape_mdv2('M√£ ƒë∆°n:')}* `{ma_don_md}`\n"
        f"{escape_mdv2(status_line)}"
    )
    body = (
        f"üì¶ *TH√îNG TIN S·∫¢N PH·∫®M*\n"
        f"üìù *M√¥ t·∫£:* {info_md}\n" +
        (f"üß© *Slot:* {slot_md}\n" if get_val("SLOT") else "") +
        (f"üìÖ Ng√†y ƒëƒÉng k√Ω: {ngay_dang_ky_md}\n" if get_val("NGAY_DANG_KY") else "") +
        f"‚è≥ *Th·ªùi h·∫°n:* {so_ngay_md} ng√†y\n"
        f"‚è≥ *Ng√†y h·∫øt h·∫°n:* {ngay_het_han_md}\n"
        f"üíµ *Gi√° b√°n:* {gia_md}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ üë§ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"üë§ *TH√îNG TIN KH√ÅCH H√ÄNG*\n"
        f"üî∏ *T√™n:* {ten_khach_md}\n" +
        (f"üîó *Li√™n h·ªá:* {link_khach_md}\n" if get_val("LINK_KHACH") else "")
    )
    footer = (
        escape_mdv2("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n") +
        escape_mdv2("üí¨ ƒê·ªÉ duy tr√¨ d·ªãch v·ª•, qu√Ω kh√°ch vui l√≤ng thanh to√°n theo th√¥ng tin d∆∞·ªõi ƒë√¢y:\n\n") +
        escape_mdv2("üè¶ Ng√¢n h√†ng: VP Bank\n") +
        escape_mdv2("üí≥ STK: 9183400998\n") +
        escape_mdv2("üë§ T√™n: NGO LE NGOC HUNG\n") +
        escape_mdv2(f"üìù N·ªôi dung: Thanh to√°n {ma_don_raw}\n\n") +
        escape_mdv2("üìé Vui l√≤ng ghi ƒë√∫ng m√£ ƒë∆°n h√†ng trong n·ªôi dung chuy·ªÉn kho·∫£n ƒë·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω nhanh ch√≥ng.\n") +
        escape_mdv2("‚ú® Tr√¢n tr·ªçng c·∫£m ∆°n qu√Ω kh√°ch!\n") + "\u200b"
    )
    return f"{header}\n{escape_mdv2('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')}\n{body}\n{footer}", qr_image

# --------------------------------------------------------------------
# H√ÄM JOB (LOGIC CH√çNH)
# --------------------------------------------------------------------

async def check_due_orders_job(context: ContextTypes.DEFAULT_TYPE):
    """
    (C·∫¨P NH·∫¨T) Ch·∫°y h√†ng ng√†y l√∫c 7:00 s√°ng.
    1. Qu√©t c√°c ƒë∆°n s·∫Øp h·∫øt h·∫°n (== 4 ng√†y) -> G·ª≠i th√¥ng b√°o.
    2. Qu√©t c√°c ƒë∆°n ƒë√£ h·∫øt h·∫°n (< 0 ng√†y) -> X√≥a h√†ng.
    Bot s·∫Ω t·ª± t√≠nh to√°n ng√†y c√≤n l·∫°i d·ª±a tr√™n c·ªôt HET_HAN.
    """
    logger.info("Running daily due orders check job (Notify == 4, Delete < 0)...")
    
    try:
        spreadsheet = connect_to_sheet()
        order_sheet = spreadsheet.worksheet(SHEETS["ORDER"])
        price_sheet = spreadsheet.worksheet(SHEETS["EXCHANGE"])
        
        all_orders_data = order_sheet.get_all_values()
        price_list_data = price_sheet.get_all_values() 
        
        if len(all_orders_data) <= 1:
            logger.info("Job: Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆°n h√†ng n√†o.")
            return

    except Exception as e:
        logger.error(f"Job: L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ Google Sheet: {e}")
        return

    # T·∫°o 2 danh s√°ch ƒë·ªÉ ch·ª©a k·∫øt qu·∫£ qu√©t
    due_orders_info = []         # Danh s√°ch ƒë∆°n c·∫ßn th√¥ng b√°o
    rows_to_delete_indices = []  # Danh s√°ch CH·ªà S·ªê H√ÄNG c·∫ßn x√≥a
    
    rows = all_orders_data[1:] # D·ªØ li·ªáu h√†ng, b·ªè qua ti√™u ƒë·ªÅ
    
    today = date.today()
    logger.info(f"Job: ƒê√£ t·∫£i {len(rows)} h√†ng. B·∫Øt ƒë·∫ßu qu√©t (Ng√†y qu√©t: {today.strftime('%d/%m/%Y')})")

    # 'enumerate(rows, start=2)' v√¨ h√†ng 1 l√† ti√™u ƒë·ªÅ, d·ªØ li·ªáu b·∫Øt ƒë·∫ßu t·ª´ h√†ng 2
    for i, row in enumerate(rows, start=2): 
        if not any(cell.strip() for cell in row): continue
        try:
            # Ki·ªÉm tra xem h√†ng c√≥ ƒë·ªß c·ªôt c·∫ßn thi·∫øt kh√¥ng
            if len(row) <= ORDER_COLUMNS["HET_HAN"] or len(row) <= ORDER_COLUMNS["ID_DON_HANG"]:
                continue
                
            ma_don_debug = row[ORDER_COLUMNS["ID_DON_HANG"]].strip()
            het_han_str = row[ORDER_COLUMNS["HET_HAN"]].strip()
            
            # B·ªè qua n·∫øu kh√¥ng c√≥ m√£ ƒë∆°n ho·∫∑c ng√†y h·∫øt h·∫°n
            if not ma_don_debug or not het_han_str: 
                continue 

            try:
                # Parse ng√†y h·∫øt h·∫°n
                het_han_date = datetime.strptime(het_han_str, "%d/%m/%Y").date()
            except ValueError:
                logger.warning(f"Job qu√©t: B·ªè qua m√£ ƒë∆°n {ma_don_debug}, l·ªói parse ng√†y: '{het_han_str}'")
                continue
            
            # T·ª∞ T√çNH TO√ÅN S·ªê NG√ÄY C√íN L·∫†I
            days_remaining = (het_han_date - today).days
            
            # Ph√¢n lo·∫°i h√†nh ƒë·ªông
            if days_remaining == 4:
                # 1. TH√îNG B√ÅO
                logger.info(f"Job: [TH√îNG B√ÅO] T√¨m th·∫•y ƒë∆°n: {ma_don_debug} (C√≤n {days_remaining} ng√†y)")
                due_orders_info.append({
                    "row_data": row,
                    "calculated_days_left": days_remaining 
                })
            elif days_remaining < 0:
                # 2. X√ìA H√ÄNG
                logger.info(f"Job: [X√ìA] T√¨m th·∫•y ƒë∆°n: {ma_don_debug} (H·∫øt h·∫°n {abs(days_remaining)} ng√†y, H√†ng {i})")
                rows_to_delete_indices.append(i) # Th√™m CH·ªà S·ªê H√ÄNG (v√≠ d·ª•: 5, 10, 20)
                
        except (IndexError, TypeError, ValueError) as e:
            logger.warning(f"Job: B·ªè qua h√†ng {i} do l·ªói parse d·ªØ li·ªáu: {e}")
            continue

    # L·∫•y ID Group/Topic t·ª´ config
    target_group_id = config.DUE_ORDER_GROUP_ID
    target_topic_id = config.DUE_ORDER_TOPIC_ID

    if not target_group_id or not target_topic_id:
        logger.error("Job: DUE_ORDER_GROUP_ID ho·∫∑c DUE_ORDER_TOPIC_ID ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t trong config!")
        return

    # --- H√ÄNH ƒê·ªòNG 1: G·ª¨I TH√îNG B√ÅO (cho ƒë∆°n == 4 ng√†y) ---
    total_due = len(due_orders_info)
    if total_due == 0:
        logger.info("Job: Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o c√≤n 4 ng√†y n·ªØa h·∫øt h·∫°n.")
        try:
            await context.bot.send_message(
                chat_id=target_group_id,
                message_thread_id=target_topic_id,
                text=escape_mdv2("‚úÖ 7:00 S√°ng: Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o c√≤n ƒë√∫ng 4 ng√†y n·ªØa h·∫øt h·∫°n."),
                parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception as e:
             logger.error(f"Job: Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o 'kh√¥ng c√≥ ƒë∆°n': {e}")
    else:
        # G·ª≠i tin nh·∫Øn th√¥ng b√°o b·∫Øt ƒë·∫ßu
        await context.bot.send_message(
            chat_id=target_group_id,
            message_thread_id=target_topic_id,
            text=f"‚òÄÔ∏è *TH√îNG B√ÅO H·∫æT H·∫†N \(7:00 S√°ng\)* ‚òÄÔ∏è\n\nPh√°t hi·ªán *{total_due}* ƒë∆°n h√†ng c√≤n ƒë√∫ng 4 ng√†y n·ªØa s·∫Ω h·∫øt h·∫°n:",
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        # Loop v√† g·ª≠i t·ª´ng ƒë∆°n h√†ng
        for index, order_info in enumerate(due_orders_info):
            try:
                caption, qr_image = build_order_caption(
                    row=order_info["row_data"],
                    price_list_data=price_list_data,
                    index=index,
                    total=total_due,
                    forced_days_left=order_info["calculated_days_left"] 
                )
                
                if qr_image:
                    qr_image.seek(0)
                    await context.bot.send_photo(
                        chat_id=target_group_id,
                        message_thread_id=target_topic_id,
                        photo=qr_image,
                        caption=caption,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                else:
                    await context.bot.send_message(
                        chat_id=target_group_id,
                        message_thread_id=target_topic_id,
                        text=caption,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                
                await asyncio.sleep(1.5) # Ngh·ªâ ƒë·ªÉ tr√°nh spam/rate limit

            except Exception as e:
                logger.error(f"Job: L·ªói khi g·ª≠i chi ti·∫øt ƒë∆°n h√†ng: {e}")
                await context.bot.send_message(
                    chat_id=config.ERROR_GROUP_ID, 
                    message_thread_id=config.ERROR_TOPIC_ID,
                    text=f"Job 'ƒê∆°n H·∫øt H·∫°n' th·∫•t b·∫°i khi G·ª¨I 1 ƒë∆°n:\n`{e}`"
                )
        logger.info(f"Job: ƒê√£ g·ª≠i xong {total_due} th√¥ng b√°o chi ti·∫øt.")
    
    # --- H√ÄNH ƒê·ªòNG 2: X√ìA C√ÅC H√ÄNG H·∫æT H·∫†N (cho ƒë∆°n < 0 ng√†y) ---
    total_deleted = len(rows_to_delete_indices)
    if total_deleted > 0:
        logger.info(f"Job: B·∫Øt ƒë·∫ßu x√≥a {total_deleted} h√†ng ƒë√£ h·∫øt h·∫°n (< 0 ng√†y)...")
        
        # S·∫Øp x·∫øp ng∆∞·ª£c (quan tr·ªçng!) ƒë·ªÉ x√≥a t·ª´ d∆∞·ªõi l√™n, tr√°nh l·ªói index
        rows_to_delete_indices.sort(reverse=True)
        
        delete_count_success = 0
        for row_index in rows_to_delete_indices:
            try:
                order_sheet.delete_rows(row_index)
                delete_count_success += 1
                logger.info(f"Job: ƒê√£ x√≥a h√†ng {row_index}.")
                await asyncio.sleep(1.2) # Th√™m delay ƒë·ªÉ tr√°nh rate limit c·ªßa Google API (l·ªói 429)
            except Exception as e:
                logger.error(f"Job: L·ªói khi x√≥a h√†ng {row_index}: {e}")
                # G·ª≠i l·ªói v√†o topic L·ªói
                try:
                    await context.bot.send_message(
                        chat_id=config.ERROR_GROUP_ID, 
                        message_thread_id=config.ERROR_TOPIC_ID,
                        text=f"Job 'ƒê∆°n H·∫øt H·∫°n' th·∫•t b·∫°i khi X√ìA h√†ng {row_index}:\n`{e}`"
                    )
                except Exception as e_bot:
                    logger.error(f"Job: L·ªói khi g·ª≠i th√¥ng b√°o l·ªói x√≥a h√†ng: {e_bot}")
        
        logger.info(f"Job: ƒê√£ x√≥a xong {delete_count_success}/{total_deleted} h√†ng h·∫øt h·∫°n.")
        
        # G·ª≠i th√¥ng b√°o t·ªïng k·∫øt v√†o group
        try:
            await context.bot.send_message(
                chat_id=target_group_id,
                message_thread_id=target_topic_id,
                text=f"üóëÔ∏è ƒê√£ t·ª± ƒë·ªông d·ªçn d·∫πp v√† x√≥a th√†nh c√¥ng *{delete_count_success}* ƒë∆°n h√†ng \(ƒë√£ h·∫øt h·∫°n\).",
                parse_mode=ParseMode.MARKDOWN_V2
            )
        except Exception as e:
            logger.error(f"Job: L·ªói khi g·ª≠i th√¥ng b√°o t·ªïng k·∫øt x√≥a: {e}")
            
    else:
        logger.info("Job: Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o (< 0 ng√†y) c·∫ßn x√≥a.")