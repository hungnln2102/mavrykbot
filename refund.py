# refund.py

import logging
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# Import c√°c h√†m c·∫ßn thi·∫øt t·ª´ c√°c file kh√°c trong d·ª± √°n c·ªßa b·∫°n
from menu import show_outer_menu
from utils import append_to_sheet
from column import SHEETS

# C·∫•u h√¨nh logging
logger = logging.getLogger(__name__)

# C√°c tr·∫°ng th√°i c·ªßa cu·ªôc h·ªôi tho·∫°i
GET_ORDER_ID, GET_AMOUNT = range(2)

async def start_refund(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """B·∫Øt ƒë·∫ßu quy tr√¨nh, y√™u c·∫ßu m√£ ƒë∆°n h√†ng v√† hi·ªÉn th·ªã n√∫t H·ªßy."""
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("‚ùå H·ªßy", callback_data='cancel_refund')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text="üí∏ **QUY TR√åNH HO√ÄN TI·ªÄN** üí∏\n\n"
             "Vui l√≤ng nh·∫≠p **M√£ ƒê∆°n H√†ng** c·∫ßn ho√†n ti·ªÅn.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    context.user_data['refund_message_id'] = query.message.message_id
    
    return GET_ORDER_ID

async def handle_order_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """L∆∞u m√£ ƒë∆°n h√†ng v√† y√™u c·∫ßu s·ªë ti·ªÅn (C√ì K√àM N√öT H·ª¶Y)."""
    order_id = update.message.text
    context.user_data['refund_order_id'] = order_id
    logger.info(f"Refund - Order ID: {order_id}")

    # T·∫°o l·∫°i n√∫t H·ªßy ƒë·ªÉ hi·ªÉn th·ªã ·ªü b∆∞·ªõc n√†y
    keyboard = [[InlineKeyboardButton("‚ùå H·ªßy", callback_data='cancel_refund')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.delete()

    # Ch·ªânh s·ª≠a tin nh·∫Øn c·ªßa bot ƒë·ªÉ y√™u c·∫ßu s·ªë ti·ªÅn
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=context.user_data.get('refund_message_id'),
        text=f"‚úÖ ƒê√£ ghi nh·∫≠n m√£ ƒë∆°n: `{order_id}`\n\n"
             f"B√¢y gi·ªù, vui l√≤ng nh·∫≠p **S·ªë Ti·ªÅn** c·∫ßn ho√†n.",
        # Thay ƒë·ªïi t·ª´ None th√†nh reply_markup ƒë·ªÉ hi·ªÉn th·ªã l·∫°i n√∫t b·∫•m
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return GET_AMOUNT

async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """L∆∞u s·ªë ti·ªÅn, x·ª≠ l√Ω gi√° tr·ªã nh·∫≠p v√†o, ghi v√†o sheet, v√† th√¥ng b√°o."""
    amount_text = update.message.text
    try:
        # Logic x·ª≠ l√Ω gi√° ti·ªÅn
        sanitized_text = amount_text.strip().replace(',', '.')
        numeric_value = float(sanitized_text)
        final_amount = numeric_value * 1000
    except ValueError:
        # X·ª≠ l√Ω l·ªói n·∫øu ng∆∞·ªùi d√πng nh·∫≠p sai ƒë·ªãnh d·∫°ng
        keyboard = [[InlineKeyboardButton("‚ùå H·ªßy", callback_data='cancel_refund')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('refund_message_id'),
            text="‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªâ nh·∫≠p s·ªë (c√≥ th·ªÉ ch·ª©a d·∫•u `.` ho·∫∑c `,`).\n\n"
                 "H√£y th·ª≠ l·∫°i ho·∫∑c b·∫•m n√∫t H·ªßy b√™n d∆∞·ªõi.",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        await update.message.delete()
        return GET_AMOUNT

    order_id = context.user_data.get('refund_order_id')
    
    # ‚ñº‚ñº‚ñº S·ª¨A L·ªñI TH·ªúI GIAN ‚ñº‚ñº‚ñº
    # L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam (GMT+7)
    now = datetime.now(ZoneInfo("Asia/Ho_Chi_Minh"))
    # ‚ñ≤‚ñ≤‚ñ≤ K·∫æT TH√öC S·ª¨A L·ªñI ‚ñ≤‚ñ≤‚ñ≤
    
    formatted_date = now.strftime("%d/%m/%Y %H:%M:%S")

    # Ghi d·ªØ li·ªáu v√†o Google Sheet
    try:
        append_to_sheet(SHEETS["REFUND"], [order_id, formatted_date, final_amount])
    except Exception as e:
        logger.error(f"L·ªói khi th·ª±c thi append_to_sheet trong refund: {e}")
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('refund_message_id'),
            text=f"‚ùå ƒê√£ x·∫£y ra l·ªói khi c·ªë g·∫Øng ghi v√†o Google Sheet. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh v√† file log.",
            parse_mode='Markdown'
        )
        context.user_data.clear()
        return ConversationHandler.END

    await update.message.delete()

    # Format l·∫°i s·ªë ti·ªÅn ƒë·ªÉ hi·ªÉn th·ªã
    display_amount = f"{int(final_amount):,}"

    # G·ª≠i tin nh·∫Øn th√¥ng b√°o th√†nh c√¥ng
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=context.user_data.get('refund_message_id'),
        text="‚úÖ **TH√ÄNH C√îNG!**\n\n"
             "ƒê√£ l∆∞u th√¥ng tin ho√†n ti·ªÅn:\n"
             f"  - M√£ ƒê∆°n H√†ng: `{order_id}`\n"
             f"  - S·ªë Ti·ªÅn ƒë√£ x·ª≠ l√Ω: `{display_amount}`\n"
             f"  - Th·ªùi Gian: `{formatted_date}`\n\n"
             "_S·∫Ω t·ª± ƒë·ªông quay v·ªÅ menu ch√≠nh sau v√†i gi√¢y..._",
        parse_mode='Markdown'
    )
    
    # D·ªçn d·∫πp context
    context.user_data.clear()

    # Ch·ªù 3 gi√¢y
    await asyncio.sleep(3)

    # Quay v·ªÅ menu ch√≠nh
    await show_outer_menu(update, context)
    
    return ConversationHandler.END

async def cancel_refund(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """H·ªßy quy tr√¨nh, d·ªçn d·∫πp v√† quay v·ªÅ menu ch√≠nh."""
    query = update.callback_query
    await query.answer()
    
    context.user_data.clear()
    logger.info("User cancelled the refund process.")
    
    await show_outer_menu(update, context)
    
    return ConversationHandler.END

def get_refund_conversation_handler() -> ConversationHandler:
    """T·∫°o v√† tr·∫£ v·ªÅ ConversationHandler cho t√≠nh nƒÉng ho√†n ti·ªÅn."""
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_refund, pattern="^start_refund$")],
        states={
            GET_ORDER_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_order_id)],
            GET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount)],
        },
        fallbacks=[CallbackQueryHandler(cancel_refund, pattern='^cancel_refund$')],
        per_message=False,
        allow_reentry=True
    )
    return conv_handler